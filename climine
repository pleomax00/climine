#! /usr/bin/env python

REDMINE = "http://redmine.traceback.in/"
KEY = "e9ca57b3ea2d034dc5dc7bb26ff04048c8a81847"
PROJECT_ID = 2

import sys, os
import argparse
import json
import urllib, urllib2
from prettytable import PrettyTable
import dateutil.parser
from dateutil import tz
import datetime
import humanize
import pytz

TEMP_FILE = "/tmp/climine_new_issue"
CONFIG_FILE = os.path.join (os.path.expanduser('~'), ".climine.json")
STATE_FILE = os.path.join (os.path.expanduser('~'), ".climine.state")
USERS_FILE = os.path.join (os.path.expanduser('~'), ".climine.users")
STATUSES_FILE = os.path.join (os.path.expanduser('~'), ".climine.statuses")
CUSTOM_FIELDS_FILE = os.path.join (os.path.expanduser('~'), ".climine.cfields")
TRACKERS_FILE = os.path.join (os.path.expanduser('~'), ".climine.trackers")

def get_local_users (config, reverse = False):
    userlist = None
    try:
        userlist = json.load (file (USERS_FILE))
    except IOError, e:
        print "Building local user database.."
        users (config, saveonly = True)
        userlist = json.load (file (USERS_FILE))

    if reverse:
        return dict((y,x) for x,y in userlist.iteritems())

    return userlist

def pretty_table (header, values):
    x = PrettyTable(header)
    x.align = 'l'
    for i in values:
        x.add_row (i)
    print x

def set_state (key, value):
    try:
        state = json.load (file (STATE_FILE))
    except IOError:
        state = {}
    state[key] = value
    file (STATE_FILE, "w").write (json.dumps (state))

def get_state (key, defaultval = None):
    try:
        state = json.load (file (STATE_FILE))
    except IOError:
        state = {}
    return state.get (key, defaultval)

def editor (project, assignee):
    assignee = assignee if assignee is not None else "Unassigned"
    try:
        file (TEMP_FILE)
    except IOError:
        file (TEMP_FILE, "w").write ("""

# This issue will be created in selected project: %s
# Assignee: %s
# To change, quit the editor now and use 'climine select' to choose a different project.
# Please explain the issue. The first line will become the title. Trailing
# lines starting with '#' (like these) will be ignored, and empty messages will
# not be submitted. 
""" % (project, assignee))
    os.system ("vi %s" % (TEMP_FILE))

    title = ""
    rest = []
    ctr = 0
    for line in file (TEMP_FILE).readlines ():
        if ctr == 0:
            title = line.strip()
            ctr += 1
        else:
            if line.strip ().startswith ("#"):
                continue
            rest.append (line.strip())

    rest = "\n".join (rest).strip()

    if title == "":
        print "No title! Gracefully quitting.."
        sys.exit (1)
    if rest == "":
        print "No body! Gracefully quitting.."
        sys.exit (1)
    os.unlink (TEMP_FILE)

    return title, rest

def get_helper (config, api, params = None):
    if params:
        url = "%s%s?key=%s&%s" % (config["HOST"], api, config["KEY"], urllib.urlencode (params))
    else:
        url = "%s%s?key=%s" % (config["HOST"], api, config["KEY"])
    try:
        fp = urllib2.urlopen (url)
    except IOError, e:
        return None

    return json.loads (fp.read ())

def post_helper (config, api, postdata):
    url = "%s%s?key=%s" % (config["HOST"], api, config["KEY"])

    request = urllib2.Request (url=url, data=json.dumps (postdata), headers={'Content-type': 'application/json'})
    opener = urllib2.build_opener()
    try:
        fp = opener.open (request)
        pass
    except IOError, e:
        return None
    return json.loads (fp.read ())

def select_project (config):
    projs = projects (config)

    new_proj = raw_input ("\nSelect project to operate on: ")
    set_state ("SELECTED_PROJECT", new_proj)
    name = projs.get (int (new_proj))
    set_state ("SELECTED_PROJECT_NAME", name)
    print "Selected:", name
    os.unlink (TEMP_FILE)

def users (config, saveonly = False):
    users = get_helper (config, "/users.json")
    innerp = users.get ("users", [])
    innerp = sorted (innerp, key = lambda x: x.get ("login"))
    
    printable = []
    savedump = {}
    for u in innerp:
        line = (u.get ("id"), u.get ("login"), u.get ("firstname") + " " + u.get ("lastname"), u.get ("mail"))
        printable.append (line)
        savedump[u.get ("login")] = u.get ("id")
    
    file (USERS_FILE, "w").write (json.dumps (savedump))
    if not saveonly:
        pretty_table (("Id", "Callsign", "Name", "Email"), printable)

def human_timeago (dt):
    now = datetime.datetime.utcnow ()
    now = now.replace(tzinfo=pytz.utc)
    diff = humanize.naturaltime (now - dt)
    return diff

def format_date (dt):
    created = dateutil.parser.parse (dt)
    created = created.astimezone (tz.tzlocal())

    return created.strftime ("%d-%b-%Y %I:%M:%S %p")

def get_all_statuses (config):
    try:
        statuses = json.load (file (STATUSES_FILE))
        return statuses
    except IOError:
        pass
    statuses = get_helper (config, "/issue_statuses.json")
    statuses = statuses.get ("issue_statuses", [])
    s = {}
    for i in statuses:
        s[str (i.get ("id"))] = i.get ("name")
    file (STATUSES_FILE, "w").write (json.dumps (s))
    return s

def get_trackers (config):
    try:
        trackers = json.load (file (TRACKERS_FILE))
        return trackers
    except IOError:
        pass
    trackers = get_helper (config, "/trackers.json")
    trackers = trackers.get ("trackers", [])
    tmap = {}
    for i in trackers:
        tmap[str(i.get ("name")).lower()] = i.get ("id")

    file (TRACKERS_FILE, "w").write (json.dumps (tmap))
    return tmap

def get_custom_fields (config):
    try:
        cfields = json.load (file (CUSTOM_FIELDS_FILE))
        return cfields
    except IOError:
        pass
    cfields = get_helper (config, "/custom_fields.json")
    cfields = cfields.get ("custom_fields", [])
    cmap = {}
    for i in cfields:
        cmap[str(i.get ("id"))] = (i.get ("name"), i.get("field_format"))
    file (CUSTOM_FIELDS_FILE, "w").write (json.dumps (cmap))
    return cmap

def get_cf_printline (config, d):
    cfields = get_custom_fields (config)
    field = cfields[str (d.get("name"))]
    val = d.get ("new_value")
    if field[1] == "user":
        all_users = get_local_users (config, reverse = True)
        val = all_users.get (int (val), val)
    return "'%s' set to %s" % (field[0], val)


def get_attrib_printline (config, d):
    changed_attr = d.get ("name")
    statuses = get_all_statuses (config)
    if changed_attr == "status_id":
        old_status = str (d.get ("old_value", "1"))
        new_status = str (d.get ("new_value", "1"))
        return "Status changed from '%s' to '%s'" % (statuses.get (old_status), statuses.get (new_status))
    if changed_attr == "assigned_to_id":
        old_value = d.get ("old_value")
        new_value = d.get ("new_value")
        users = get_local_users (config, reverse = True)
        if old_value:
            return "Assignee changed from '%s' to '%s'" % (users.get (int (old_value)), users.get (int (new_value)))
        else:
            return "Assignee set to '%s'" % (users.get (int (new_value)))
    return str (d)

def show_issue (config, ticket_num):
    issue = get_helper (config, "/issues/%s.json" % (ticket_num), {"include": "journals"})
    issue = issue.get ("issue", {})

    print "Id:", issue.get ("id")
    print "Author:", issue.get ("author").get ("name")
    print "Priority:", issue.get ("priority").get ("name")
    print "Tracker:", issue.get ("tracker").get ("name")
    print "Assignee:", issue.get ("assigned_to").get ("name")
    print "Created:", format_date (issue.get ("created_on"))
    print "Project:", issue.get ("project").get ("name")
    print "URI: %s/issues/%s" % (config.get ("HOST"), ticket_num) 
    print
    print "Subject:", issue.get ("subject")
    print "-" * 80
    print issue.get ("description")
    print "-" * 80
    journal = issue.get ("journals")
    for j in journal:
        diff = human_timeago (dateutil.parser.parse (j.get("created_on")))
        print "Updated by: %s, %s" % (j.get ("user").get ("name"), diff)
        details = j.get ("details")
        for d in details:
            if d.get ("property") == "attr":
                print "\t*", get_attrib_printline (config, d)
            elif d.get ("property") == "cf":
                print "\t*", get_cf_printline (config, d)
            else:
                print "\t* Unknown property %s to print" % (d.get ("property"))
        notes = j.get ("notes")
        if notes:
            print notes
        print


def projects (config):
    projects = get_helper (config, "/projects.json")
    innerp = projects.get ("projects", [])
    innerp = sorted (innerp, key = lambda x: x.get ("id"))
    data = {}
    for p in innerp:
        if p.get ("status", 0) == 1:
            print "%d: %s" % (p.get ("id"), p.get ("name"))
            data[p.get("id")] = p.get ("name")
    return data

def listing (config, user, limit = None):
    limit = 40 if limit is None else limit
    sel_project_id = get_state ("SELECTED_PROJECT", 1)
    opts =  {
        "project_id": sel_project_id,
        "limit": limit,
    }
    if user is not None:
        opts["assigned_to_id"] = user

    issues = get_helper (config, "/issues.json", opts)
    innerp = issues.get ("issues", [])
    innerp = sorted (innerp, key = lambda x: x.get ("id"), reverse = True)
    print "Listing selected project.."
    print
    printable = []
    rows = 0
    for issue in innerp:
        assigned = issue.get ("assigned_to", {}).get ("name")
        assigned = "-" if assigned is None else assigned
        status = issue.get ("status", {}).get ("name")
        priority = issue.get ("priority", {}).get ("name")
        tracker = issue.get ("tracker", {}).get ("name")
        printable.append ((issue.get ("id"), tracker, status, issue.get ("subject"), assigned, priority))
        rows += 1
    if rows > 0:
        pretty_table (("Id", "Tracker", "Status", "Subject", "Assigned", "Priority"), printable)
    print "(%d rows in total)" % (rows)

def create_issue (config, trackerid, assignee):
    sel_project_id = get_state ("SELECTED_PROJECT", None)
    sel_project_name = get_state ("SELECTED_PROJECT_NAME", None)

    if sel_project_id is None:
        print "No project selected, User 'climine select' to select a project first!"
        sys.exit (1)

    title, body = editor (sel_project_name, assignee)
    issue = {
        "project_id": sel_project_id,
        "tracker_id": int (trackerid),
        "subject": title,
        "description": body,
    }

    if assignee is not None:
        localusers = get_local_users (config)
        if not localusers.has_key (assignee):
            print "No such user!"
            sys.exit (1)
        issue["assigned_to_id"] = localusers.get (assignee)

    resp = post_helper (config, "/issues.json", {"issue": issue})
    if not resp.has_key ("issue"):
        print "Error in creating issue! Please check the log!"
        sys.exit (1)
    token_num = resp.get ("issue").get ("id")
    print "Created issue #%d, %s/issues/%d" % (token_num, config["HOST"], token_num)

def init ():
    host = raw_input ("Input your Redmine host: ").strip ()
    key = raw_input ("Input your API key: ").strip ()

    if host == "" or key == "":
        print "Need a valid host and key! Aborting!!"
        sys.exit (1)

    if not host.startswith ("http"):
        host = "http://%s" % (host)
    
    if host.endswith ("/"):
        host = host[:-1]

    config = {
        "HOST": host,
        "KEY": key,
    }

    file (CONFIG_FILE, "w").write (json.dumps (config))

parser = argparse.ArgumentParser(description='Redmine CLI Client')
parser.add_argument('command', type=str, help='Command to execute')
parser.add_argument('subcommand', type=str, help='Command to execute', nargs='?')
parser.add_argument('-u', '--user', type=str, help='User name of the assignee')
parser.add_argument('--limit', type=int, help='Pagination limit')
parser.add_argument('--mine', action='store_true', help='List my issues only')

try:
    CONFIG = json.load (file (CONFIG_FILE))
except:
    print "Config file doesn't exist, genreating one interactively!"
    print
    init ()
    sys.exit (0)

args = parser.parse_args()

if len (sys.argv) < 2:
    print "Usage: climine <action>"
    sys.exit (1)

if args.command == "open" or args.command == "new":
    trackers = get_trackers (CONFIG)
    if not trackers.has_key (args.subcommand):
        print "Specify tracker.. bug/feature..."
        sys.exit (1)
    create_issue (CONFIG, trackers.get (args.subcommand), args.user)
elif args.command == "select":
    select_project (CONFIG)
elif args.command == "init":
    init ()
elif args.command == "projects":
    projects (CONFIG)
elif args.command == "users":
    users (CONFIG)
elif args.command == "show":
    if args.subcommand is None:
        print "Provide issue number!"
        sys.exit (1)
    show_issue (CONFIG, args.subcommand)
elif args.command == "ls" or args.command == "list":
    limit = args.limit
    if args.mine:
        listing (CONFIG, "me", limit)
    else:
        thisuser = None
        if args.user:
            users = get_local_users (CONFIG)
            if not users.has_key (args.user):
                print "No such user! Please update the local user DB by running 'climine users'"
                sys.exit (1)
            thisuser = users[args.user]
        listing (CONFIG, thisuser, limit)


